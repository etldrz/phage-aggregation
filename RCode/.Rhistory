source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
?rbinom
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
found_theta <- rpois(100, 5)
head(found_theta)
omega <- 0.01
burst_chance <- rbinom(length(found_theta), 1, omega)
head(burst_chance)
which(burst_chance == 1)
found_theta <- rpois(3e4, 5)
burst_chance <- rbinom(length(found_theta), 1, omega)
length(which(burst_chance == 1))
?rpois
rpois(50, 30)
outcomes <- rpois(1e4, 5)
head(outcomes)
# found_theta represents a phage interacting with a host
found_theta <- which(outcomes %in% c(2, 3))
length(found_theta)
burst_chance <- rbinom(length(found_theta), 1, omega)
burst_size_A <- rpois(length(outcomes[found_theta] == 2), burst_A)
burst_size_B <- rpois(length(outcomes[found_theta] == 3), burst_B)
burst_B <- 15
burst_size_B <- rpois(length(outcomes[found_theta] == 3), burst_B)
B_did_burst <- which(outcomes[found_theta] == 3 & burst_chance == 1)
head(B_did_burst)
length(B_did_burst)
outcomes[B_did_burst]
burst_chance[B_did_burst]
B_did_burst <- which(burst_chance == 1 & outcomes[found_theta] == 3 )
outcomes[B_did_burst]
outcomes[found_theta]
length(which(outcomes[found_theta] == 3))
B_did_burst <- 1:length(found_theta) %in% burst_chance == 1 & outcomes[found_theta] == 3
length(B_did_burst)
length(found_theta)
#B did burst is a vector of locations inside  outcomes where outcomes ==3 & burst_chance ==1
B_did_burst <- outcomes[which(outcomes[found_theta[burst_chance]] == 3)]
length(B_did_burst)
burst_chance
outcomes <- rpois(3e5, 5)
# found_theta represents a phage interacting with a host
found_theta <- which(outcomes %in% c(2, 3))
length(found_theta)
burst_chance <- which(rbinom(length(found_theta), 1, omega) == 1)
length(burst_chance)
#B did burst is a vector of locations inside  outcomes where outcomes ==3 & burst_chance ==1
B_did_burst <- outcomes[which(outcomes[found_theta[burst_chance]] == 3)]
length(B_did_burst)
#B did burst is a vector of locations inside  outcomes where outcomes ==3 & burst_chance ==1
B_did_burst <- which(outcomes[found_theta[burst_chance]] == 3)
length(B_did_burst)
head(outcomes[B_did_burst])
head(outcomes[found_theta])
# found_theta represents a phage interacting with a host
found_theta <- outcomes[which(outcomes %in% c(2, 3))]
head(outcomes[found_theta])
head(found_theta)
# found_theta represents a phage interacting with a host
found_theta <- which(outcomes %in% c(2, 3))
head(found_theta)
head(found_theta[burst_chance])
length(burst_chance)
head(burst_chance)
found_theta[405]
outcomes[1894]
outcomes[head(found_theta)[head(burst_chance)]]
head(outcomes[found_theta[burst_chance]])
#B did burst is a vector of locations inside  outcomes where outcomes ==3 & burst_chance ==1
B_did_burst <- which(outcomes[found_theta[burst_chance]] == 3)
head(B_did_burst)
length(B_did_burst)
length(found_theta)
head(found_theta)
head(outcomes[B_did_burst])
#B did burst is a vector of locations inside  outcomes where outcomes ==3 & burst_chance ==1
B_did_burst <- 1:length(outcomes)[which(outcomes[found_theta[burst_chance]] == 3)]
#B did burst is a vector of locations inside  outcomes where outcomes ==3 & burst_chance ==1
B_did_burst <- which(outcomes[found_theta[burst_chance]] == 3)
head(outcomes[B_did_burst])
head(found_theta[burst_chance])
head(burst_chance)
head(outcomes[found_theta] == 3)
head(found_theta)
outcomes[9]
found_theta[405]
outcomes[18945]
outcomes[1894]
head(outcomes[found_theta[burst_chance]])
#B did burst is a vector of locations inside  outcomes where outcomes ==3 & burst_chance ==1
B_did_burst <- which(1:length(outcomes)[found_theta[burst_chance]] == 3)
#B did burst is a vector of locations inside  outcomes where outcomes ==3 & burst_chance ==1
B_did_burst <- which(1:length(outcomes)[found_theta[burst_chance]])
#B did burst is a vector of locations inside  outcomes where outcomes ==3 & burst_chance ==1
B_did_burst <- 1:length(outcomes)[found_theta[burst_chance]]
head(found_theta[burst_chance])
length(outcomes)
length(1:length(outcomes))
1:length(outcomes)[1894]
1:length(outcomes)[3]
class(1:length(outcomes))
t <- 1:3
1
t
t[1]
t[3]
1:3e5
t <- 3e5
head(t)
t <- 1:3e5
head(t)
t[1]
t[2]
burst_chance <- which(rbinom(length(found_theta), 1, omega) == TRUE)
length(burst_chance)
burst_chance <- which(rbinom(length(found_theta), 1, omega) == 1)
length(burst_chance)
burst_chance <- which(rbinom(length(found_theta), 1, omega) == TRUE)
length(burst_chance)
head(found_theta[burst_chance])
outcomes[393]
outcomes[400]
outcomes[763]
outcomes[805]
outcomes[1331]
t <- found_theta[burst_chance==TRUE]
head(t)
t <- found_theta[burst_chance==1]
head(t)
t
length(burst_chance==T)
outcomes <- rpois(5, 5e5)
# found_theta represents a phage interacting with a host
found_theta <- which(outcomes %in% c(2, 3))
burst_chance <- rbinom(length(found_theta), 1, omega)
t <- found_theta[burst_chance==1]
length(t)
length(burst_chance==1)
burst_chance <- rbinom(length(found_theta), 1, omega)
length(burst_chance==1)
length(which(burst_chance==1))
length(which(burst_chance)==1)
head(burst_chance)
length(found_theta)
head(outcomes0)
head(outcomes)
outcomes <- rpois(5e5, 5)
# found_theta represents a phage interacting with a host
found_theta <- which(outcomes %in% c(2, 3))
burst_chance <- rbinom(length(found_theta), 1, omega)
length(found_theta[burst_chance==1])
head(found_theta[burst_chance==1])
outcomes[206]
outcomes[595]
outcomes[3810]
outcomes[1425]
#B did burst is a vector of locations inside  outcomes where outcomes ==3 & burst_chance ==1
B_did_burst <- found_theta[burst_chance==1]
head(outcomes[B_did_burst])
t <- B_did_burst[outcomes[B_did_burst] != 3]
head(t)
head(outcomes[t])
t <- B_did_burst[outcomes[B_did_burst] != 2]
head(outcomes[t])
t
t <- B_did_burst[!outcomes[B_did_burst] %in% 2]
head(outcomes[t])
did_burst <- found_theta[burst_chacne==TRUE]
#B did burst is a vector of locations inside  outcomes where outcomes ==3 & burst_chance ==1
B_did_burst <- did_burst[!outcomes[did_burst] %in% 2]
did_burst <- found_theta[burst_chance==TRUE]
#B did burst is a vector of locations inside  outcomes where outcomes ==3 & burst_chance ==1
B_did_burst <- did_burst[!outcomes[did_burst] %in% 2]
A_did_burst <- did_burst[!outcomes[did_burst] %in% 3]
head(outcomes(B_did_burst))
head(outcomes)
head(outcomes[B_did_burst])
head(outcomes[A_did_burst])
?replicate()
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
burst_chance <- rbinom(outcomes, 1, omega)
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
setwd("C:/Users/Evan/Desktop/repos/phageAggregation/RCode")
source('single_patch.R')
args(baseSimulation)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
rbinom(10, 1, omega)
rbinom(100, 1, omega)
rbinom(100, 1, .5)
which(rbinom(100, 1, .5) == TRUE)
length(rbinom(100, 1, .5))
source("~/.active-rstudio-document", echo=TRUE)
View(base)
?rbimultinom
?rmultinom
t <- matrix(10, nrow=2, ncol=3)
t
t/2
t/c(1,2)
t/c(1,2,3)
rmultinom(1e4, 4, c(.1,.2,.3,.4))
rmultinom(2, 4, c(.1,.2,.3,.4))
rmultinom(2, 2, c(.1,.2,.3,.4))
rmultinom(2, 6, c(.1,.2,.3,.4))
rmultinom(2, c(1,2), c(.1,.2,.3,.4))
rmultinom(2, c(1,9), c(.1,.2,.3,.4))
rmultinom(2, c(1,9), c(.1,.2,.3,.4))
rmultinom(2, c(1,9), c(.1,.2,.3,.4))
rmultinom(2, c(1,9), c(.1,.2,.3,.4))
rmultinom(2, c(1,9), c(.1,.2,.3,.4))
rmultinom(2, 8, c(.1,.2,.3,.4))
rmultinom(2, 1, c(.1,.2,.3,.4))
rmultinom(2, 1, c(.9,.9))
rmultinom(2, 1, c(.9,.9))
rmultinom(2, 1, c(.9,.9))
rmultinom(2, 1, c(.9,.9))
rmultinom(2, 1, c(.9,.9))
rmultinom(2, 1, c(.1,.2,.3,.4))
table(rnorm(1, 100))
table(rnorm(100, 100))
?appl
?apply
?mapply
?sapply
source("~/.active-rstudio-document", echo=TRUE)
matrix_data
s <- base[,seq(1, ncol(base), 2)]
g <- base[,seq(2, ncol(base), 2)]
test <- basicBootstrap(s[,1], g[,1])
test
#' Generates a pair of bootstrapped fitness vectors
basicBootstrap <- function(s, g){
size <- length(g)
dfG <- as.data.frame(table(g))
uniqueG <- as.numeric(levels(dfG[,1]))
freqG <- dfG[,2] / size
dfS <- as.data.frame(table(s))
uniqueS <- as.numeric(levels(dfS[,1]))
freqS <- dfS[,2] / size
g_means <- mean(rowSums(rmultinom(bt_size, 1, freqG)) * uniqueG)
s_means <- mean(rowSums(rmultinom(bt_size, 1, freqS)) * uniqueS)
# g_means <- replicate(bt_size, mean(sample(uniqueG, size, replace=T, prob=freqG)))
# s_means <- replicate(bt_size, mean(sample(uniqueS, size, replace=T, prob=freqS)))
return(cbind(s_means, g_means))
}
test <- basicBootstrap(s[,1], g[,1])
test
s <- s[,1]
g <- g[,1]
dfG <- as.data.frame(table(g))
dfG
uniqueG <- as.numeric(levels(dfG[,1]))
uniqueG
freqG <- dfG[,2] / size
size <- length(g)
freqG <- dfG[,2] / size
freqG
sum(freqG)
dfS <- as.data.frame(table(s))
uniqueS <- as.numeric(levels(dfS[,1]))
freqS <- dfS[,2] / size
rmultinom(bt_size, 1, freqG)
head(rmultinom(bt_size, 1, freqG))
View(rmultinom(bt_size, 1, freqG))
View(rmultinom(length(g), 1, freqG))
rmultinom(1, length(g), freqG)
mean(rowSums(rmultinom(1, length(g), freqG)) * uniqueG)
mean(rmultinom(1, length(g), freqG) * uniqueG)
sum(rmultinom(1, length(g), freqG) * uniqueG)
rmultinom(1, length(g), freqG) * uniqueG
rmultinom(1, length(g), freqG)
length(uniqueG)
length(freqG)
head(uniqueG)
head(rmultinom(1, length(g), freqG))
rmultinom(1, length(g), freqG) * uniqueG
freqG
mean(rmultinom(1, length(g), freqG) * uniqueG)
rmultinom(1, length(g), freqG)
mean(rmultinom(1, length(g), freqG) * uniqueG)
mean(rmultinom(1, length(g), freqG) * uniqueG)
mean(rmultinom(1, length(g), freqG) * uniqueG)
mean(rmultinom(1, length(g), freqG) * uniqueG)
mean(rmultinom(1, length(g), freqG) * uniqueG)
mean(rmultinom(1, length(g), freqG) * uniqueG)
mean(rmultinom(1, length(g), freqG) * uniqueG)
mean(rmultinom(1, length(g), freqG) * uniqueG)
mean(rmultinom(1, length(g), freqG) * uniqueG)
mean(rmultinom(1, length(g), freqG) * uniqueG)
mean(sample(uniqueG, size, replace=T, prob=freqG)
)
sample(uniqueG, size, replace=T, prob=freqG)
t <- sample(uniqueG, size, replace=T, prob=freqG)
length(which(t) == 0)
length(which(t = 0))
length(which(t == 0))
length(which(t == 1))
mean(rmultinom(1, size, freqG)/size * uniqueG)
mean(rmultinom(1, size, freqG)/size * uniqueG/size)
g_means <- mean(rmultinom(1, size, freqG) * uniqueG)/size
mean(rmultinom(1, size, freqG) * uniqueG)/size
mean(t)
rmultinom(1, size, freqG) * uniqueG
sum(rmultinom(1, size, freqG) * uniqueG)
r <- sum(rmultinom(1, size, freqG) * uniqueG)
r/size
#' Generates a pair of bootstrapped fitness vectors
basicBootstrap <- function(s, g){
size <- length(g)
dfG <- as.data.frame(table(g))
uniqueG <- as.numeric(levels(dfG[,1]))
freqG <- dfG[,2] / size
dfS <- as.data.frame(table(s))
uniqueS <- as.numeric(levels(dfS[,1]))
freqS <- dfS[,2] / size
g_means <- sum(rmultinom(1, size, freqG) * uniqueG) / size
s_means <- sum(rmultinom(1, size, freqS) * uniqueS) / size
# g_means <- replicate(bt_size, mean(sample(uniqueG, size, replace=T, prob=freqG)))
# s_means <- replicate(bt_size, mean(sample(uniqueS, size, replace=T, prob=freqS)))
return(cbind(s_means, g_means))
}
s <- base[,seq(1, ncol(base), 2)]
g <- base[,seq(2, ncol(base), 2)]
test <- basicBootstrap(s[,1], g[,1])
View(test)
#' Generates a pair of bootstrapped fitness vectors
basicBootstrap <- function(s, g){
size <- length(g)
dfG <- as.data.frame(table(g))
uniqueG <- as.numeric(levels(dfG[,1]))
freqG <- dfG[,2] / size
dfS <- as.data.frame(table(s))
uniqueS <- as.numeric(levels(dfS[,1]))
freqS <- dfS[,2] / size
g_means <- replicate(bt_size, sum(rmultinom(1, size, freqG) * uniqueG) / size)
s_means <- replicate(bt_size, sum(rmultinom(1, size, freqS) * uniqueS) / size)
# g_means <- replicate(bt_size, mean(sample(uniqueG, size, replace=T, prob=freqG)))
# s_means <- replicate(bt_size, mean(sample(uniqueS, size, replace=T, prob=freqS)))
return(cbind(s_means, g_means))
}
test <- basicBootstrap(s[,1], g[,1])
test <- basicBootstrap(s[,1], g[,1])
View(test)
source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
args(findLyseFitness)
outcomes <- rpois(50, 5)
# found_theta represents a phage interacting with a host
found_theta <- which(outcomes %in% c(2, 3))
head(found_theta)
burst_chance <- rbinom(found_theta, 1, omega)
head(burst_chance)
outcomes[found_theta[1]]
source("~/.active-rstudio-document", echo=TRUE)
loc
source("~/.active-rstudio-document", echo=TRUE)
head(found_theta)
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
length(which(test[,1] < test[,2]))
View(test)
library(foreach)
boot <- foreach(i = 1:ncol(g), .combine='cbind') %do% {
basicBootstrap(s[,i], g[,i])
}
View(boot)
plotBaseSimulation(boot)
location <- 'C:/Users/Evan/Desktop/repos/phageAggregation/plottingData/failure/lowerFailure/'
base_location <- paste(location, 'base/alpha=0, theta=0.4, p=0, lambda=0.01, omega=0.01.txt', sep="")
file.create(base_location)
write.table(base, base_location, quote=F, sep=",")
boot_location <- paste(location, 'boostrapped/alpha=0, theta=0.4, p=0, lambda=0.01, omega=0.01.txt', sep="")
file.create(boot_location)
write.table(boot, boot_location,quote=F,sep=",")
boot_location <- paste(location, 'bootstrapped/alpha=0, theta=0.4, p=0, lambda=0.01, omega=0.01.txt', sep="")
file.create(boot_location)
write.table(boot, boot_location,quote=F,sep=",")
t <- list("a", 1, c(1, 2, 3), TRUE)
t
t[[4]]$something = "33"
t
t <- list("something"  = c(1,3))
t
t$something
t <- list(something=list(somethingelse =c(1,222,3)))
t
t$something
file.choose()
source("~/.active-rstudio-document", echo=TRUE)
data
data
?data
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
file <- files[1]
boot <- read.table(file, header=TRUE, sep=",")
View(boot)
ncol(boot)
nrow(boot)
?mapply
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
class(boot)
class(s)
nrow(s)
ncol(s)
ncol(g)
nrow(g)
length(s_greater)
lower_pari
lower_pair
quant
i
viable_lower
class(g)
debugSource("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
viable_lower
viable_upper
debugSource("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
lower_nB
debugSource("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
lower_nB
lower_pair
debugSource("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
fitness
fitness[[1]]
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
fitness
class(fitness)
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
fitness
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
fitness
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
fitness
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
fitness
View(fitness)
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(fitness)
fitness
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(fitness)
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(fitness)
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
dim(g)
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
plotFitness(fitness)
fitness[[i]]
fitness[[1]]
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
plotFitness(fitness)
glimpse(fitness)
head(fitness)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
install.packages('deSolve')
source("~/.active-rstudio-document", echo=TRUE)
?ode()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
?ode()
install.packages('primer')
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
?with
