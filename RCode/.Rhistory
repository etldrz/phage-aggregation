setwd("C:/Users/Evan/Desktop/R Shit/phageAggregation/RCode")
source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/Evan/Desktop/R Shit/phageAggregation/RCode/single_patch.R", echo=TRUE)
plotQuantileGrid(grid, colors, nA, alpha, theta, p, omega, lambda)
source("C:/Users/Evan/Desktop/R Shit/phageAggregation/RCode/single_patch.R", echo=TRUE)
plotQuantileGrid(grid, colors, nA, alpha, theta, p, omega, lambda)
plotQuantileGrid(grid, colors, nA, alpha, theta, p, omega, lambda)
plotQuantileGrid(grid, colors, nA, alpha, theta, p, omega, lambda)
source("C:/Users/Evan/Desktop/R Shit/phageAggregation/RCode/single_patch.R", echo=TRUE)
plotQuantileGrid(grid, colors, nA, alpha, theta, p, omega, lambda)
source("C:/Users/Evan/Desktop/R Shit/phageAggregation/RCode/single_patch.R", echo=TRUE)
plotQuantileGrid(grid, colors, nA, alpha, theta, p, omega, lambda)
source("C:/Users/Evan/Desktop/R Shit/phageAggregation/RCode/single_patch.R", echo=TRUE)
plotQuantileGrid(grid, colors, nA, alpha, theta, p, omega, lambda)
source("C:/Users/Evan/Desktop/R Shit/phageAggregation/RCode/single_patch.R", echo=TRUE)
plotQuantileGrid(grid, colors, nA, alpha, theta, p, omega, lambda)
plotQuantileGrid(grid, colors, nA, alpha, theta, p, omega, lambda)
source("C:/Users/Evan/Desktop/R Shit/phageAggregation/RCode/single_patch.R", echo=TRUE)
plotQuantileGrid(grid, colors, nA, alpha, theta, p, omega, lambda)
source("C:/Users/Evan/Desktop/R Shit/phageAggregation/RCode/single_patch.R", echo=TRUE)
plotQuantileGrid(grid, colors, nA, alpha, theta, p, omega, lambda)
source("C:/Users/Evan/Desktop/R Shit/phageAggregation/RCode/single_patch.R", echo=TRUE)
plotQuantileGrid(grid, colors, nA, alpha, theta, p, omega, lambda)
source("C:/Users/Evan/Desktop/R Shit/phageAggregation/RCode/single_patch.R", echo=TRUE)
plotQuantileGrid(grid, colors, nA, alpha, theta, p, omega, lambda)
source("~/.active-rstudio-document", echo=TRUE)
info_file <- paste(base, '_', 'info')
base <- 'C:/Users/Evan/Desktop/repos/phageAggregation/plottingData/'
info_file <- paste(base, '_', 'info')
file.create(info_file)
extr <- c(p, lambda, omega)
names(extr) <- c('p', 'lambda', 'omega')
write.table(extr, info_file)
info_file <- paste(base, 'info')
file.create(info_file)
extr <- c(p, lambda, omega)
names(extr) <- c('p', 'lambda', 'omega')
write.table(extr, info_file)
base <- 'C:/Users/Evan/Desktop/repos/phageAggregation/plottingData/'
curr_locat <- paste(base, 'alpha is', as.character(alpha), 'theta is', as.character(theta))
alpha <- 3
theta <- 3
curr_locat <- paste(base, 'alpha is', as.character(alpha), 'theta is', as.character(theta))
file.create(curr_locat)
source("C:/Users/Evan/Desktop/repos/phageAggregation/RCode/single_patch.R", echo=TRUE)
args(baseSimulation)
args(sample)
matrix(nrow=2, ncol=4, dimnames=c("a", "b"))
matrix(nrow=2, ncol=4, dimnames=list("a", "b"))
matrix(nrow=2, ncol=4, dimnames=list(rep(c("a", "b", 2))))
rep(c("a", "b"), 10)
matrix(nrow=2, ncol=4)
t <- matrix(nrow=2, ncol=4)
colnames(t) <- rep(c("a", "B") 2)
colnames(t) <- rep(c("a", "B"), 2)
t
curr_locat_bs <- paste(curr_locat, "_BOOTSTRAPPED")
curr_locat_bs
curr_locat_bs <- paste(curr_locat, "(BOOTSTRAPPED)")
curr_locat_bs
alphas <- seq(0, 1, 0.1)
thetas <- seq(0, 1, 0.1)
nA <- 30; p <- 0.2; lambda <- 0.1; omega <- 0.01
base <- 'C:/Users/Evan/Desktop/repos/phageAggregation/plottingData/'
booties <- function(matrix){
size <- 10000
after <- matrix(nrow=size, ncol=nA*2)
colNames(after) <- rep(c("W.S", "W.G"), nA)
for(i in 1:ncol(after)){
for(s in 1:nrow(after)){
after[s,i] <- mean(sample(x=matrix[,i], size=nrow(matrix), replace=TRUE))
}
}
return(after)
}
for(alpha in alphas){
for(theta in thetas){
curr_locat <- paste(base, 'alpha is', as.character(alpha), 'theta is', as.character(theta))
file.create(curr_locat)
base <- baseSimulation(nA, alpha, lambda, omega, theta, p)
write.table(base, file=curr_locat, quote=FALSE, sep=',')
boot <- booties(base)
curr_locat_bs <- paste(curr_locat, "(BOOTSTRAPPED)")
file.create(curr_locat_bs)
write.table(boot, file=curr_locat_bs, quote=FALSE, sep=',')
}
}
source("~/.active-rstudio-document", echo=TRUE)
